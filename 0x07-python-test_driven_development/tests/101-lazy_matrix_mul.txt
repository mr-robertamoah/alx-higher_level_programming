Testing ``100-matrix_mul`` module
=================================

Testing ``matrix_mul`` function
-------------------------------

Import function from module:
::

    >>> import numpy as np
    >>> matrix_mul = np.matmul

How to use function:
::

    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
    array([[ 7, 10],
           [15, 22]])
    >>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
    array([[13, 16]])
    
Arguments must be two:
::

    >>> matrix_mul([[1, 3]])
    Traceback (most recent call last):
    ...
    TypeError: matmul() missing required argument 'b' (pos 2)

    >>> matrix_mul()
    Traceback (most recent call last):
    ...
    TypeError: matmul() missing required argument 'a' (pos 1)

Arguments must be lists:
::

    >>> matrix_mul("m_a", [[1, 2]])
    Traceback (most recent call last):
    ...
    ValueError: Scalar operands are not allowed, use '*' instead

    >>> matrix_mul([[1, 2]], "m_b")
    Traceback (most recent call last):
    ...
    ValueError: Scalar operands are not allowed, use '*' instead

Arguments cannot be empty list:
::

    >>> matrix_mul([], [[1, 2]])
    Traceback (most recent call last):
    ...
    ValueError: shapes (0,) and (1,2) not aligned: 0 (dim 0) != 1 (dim 0)

    >>> matrix_mul([[]], [[1, 2]])
    Traceback (most recent call last):
    ...
    ValueError: shapes (1,0) and (1,2) not aligned: 0 (dim 1) != 1 (dim 0)

    >>> matrix_mul([[1, 2]], [])
    Traceback (most recent call last):
    ...
    ValueError: shapes (1,2) and (0,) not aligned: 2 (dim 1) != 0 (dim 0)

    >>> matrix_mul([[1, 2]], [[]])
    Traceback (most recent call last):
    ...
    ValueError: shapes (1,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)

Arguments must be a list of lists:
::

    >>> matrix_mul([[1, 2], "m_a"], [[1, 2]])
    Traceback (most recent call last):
    ...
    ValueError: setting an array element with a sequence

    >>> matrix_mul([[1, 2]], [[1, 2], "m_b"])
    Traceback (most recent call last):
    ...
    ValueError: setting an array element with a sequence

Arguments must be list of lists containing ints and floats:
::

    >>> matrix_mul([[1, 2], ["m_a"], [1, 2]], [[1, 2]])
    Traceback (most recent call last):
    ...
    ValueError: setting an array element with a sequence

    >>> matrix_mul([[1, 2]], [[1, 2], [1, 2], ["m_b"]])
    Traceback (most recent call last):
    ...
    ValueError: setting an array element with a sequence

Arguments must be lists containing lists of the same length:
::

    >>> matrix_mul([[1, 2], [3], [1, 2]], [[1, 2]])
    Traceback (most recent call last):
    ...
    ValueError: setting an array element with a sequence.

    >>> matrix_mul([[1, 2]], [[1, 2], [1, 2], [3]])
    Traceback (most recent call last):
    ...
    ValueError: setting an array element with a sequence.

Multiplication is only possible if number of columns of m_a
is not equal to the number of rows of m_b:
::

    >>> matrix_mul([[1, 2], [3, 5], [1, 2]], [[1, 2], [3, 4], [5, 6]])
    Traceback (most recent call last):
    ...
    ValueError: shapes (3,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)

    >>> matrix_mul([[1, 2], [1, 2]], [[1, 5]])
    Traceback (most recent call last):
    ...
    ValueError: shapes (2,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)
