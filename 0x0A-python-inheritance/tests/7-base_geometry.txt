Testing ``7-base_geometry`` module
==================================

Testing ``BaseGeometry`` class
------------------------------

Importing ``BaseGeometry`` class from ``7-base_geometry`` module:
::

	>>> BaseGeometry = __import__("7-base_geometry").BaseGeometry

Instantiate class:
::

	>>> base_g = BaseGeometry()

Call area method with no arguments:
::

	>>> base_g.area()
	Traceback (most recent call last):
	...
	Exception: area() is not implemented

Call area method with an argument:
::

	>>> base_g.area(1)
	Traceback (most recent call last):
	...
	TypeError: area() takes 1 positional argument but 2 were given

Call integer_validator with name string and integer value:
::

	>>> base_g.integer_validator("age", 16)

Call integer_validator with no arguments:
::

	>>> base_g.integer_validator()
	Traceback (most recent call last):
	...
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Call integer_validator with one argument:
::

	>>> base_g.integer_validator("hey")
	Traceback (most recent call last):
	...
	TypeError: integer_validator() missing 1 required positional argument: 'value'

Call integer_validator with non integer value:
::

	>>> base_g.integer_validator("name", "john")
	Traceback (most recent call last):
	...
	TypeError: name must be an integer
	>>> base_g.integer_validator("bool", True)
	Traceback (most recent call last):
        ...
        TypeError: bool must be an integer
	>>> base_g.integer_validator("float", 1.5)
        Traceback (most recent call last):
        ...
        TypeError: float must be an integer

Call integer_validator with an integer equal to 0
::

	>>> base_g.integer_validator("amount", 0)
	Traceback (most recent call last):
	...
	ValueError: amount must be greater than 0

Call integer_validator with an integer less than 0:
::

	>>> base_g.integer_validator("amount", -2)
	Traceback (most recent call last):
	...
	ValueError: amount must be greater than 0

